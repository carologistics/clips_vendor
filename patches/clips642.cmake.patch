diff --color -urN clipsrules-64x/clipsjni/CMakeLists.txt clipsrules-64x-new/clipsjni/CMakeLists.txt
--- clipsrules-64x/clipsjni/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ clipsrules-64x-new/clipsjni/CMakeLists.txt	2024-08-18 03:47:45.040034352 +0200
@@ -0,0 +1,314 @@
+# Find Java
+find_package(Java REQUIRED)
+include(UseJava)
+find_package(JNI REQUIRED)
+
+set(SRC_DIR java-src)
+set(NATIVE_SRC_DIR library-src)
+# Main CLIPSJNI library
+set(JNI_CP net/sf/clipsrules/jni)
+set(JNI_FILES
+    ${SRC_DIR}/${JNI_CP}/Activation.java
+    ${SRC_DIR}/${JNI_CP}/Agenda.java
+    ${SRC_DIR}/${JNI_CP}/BaseRouter.java
+    ${SRC_DIR}/${JNI_CP}/CaptureRouter.java
+    ${SRC_DIR}/${JNI_CP}/CLIPSException.java
+    ${SRC_DIR}/${JNI_CP}/Focus.java
+    ${SRC_DIR}/${JNI_CP}/CLIPSLineError.java
+    ${SRC_DIR}/${JNI_CP}/CLIPSLoadException.java
+    ${SRC_DIR}/${JNI_CP}/CLIPSType.java
+    ${SRC_DIR}/${JNI_CP}/CommandExecutionEvent.java
+    ${SRC_DIR}/${JNI_CP}/CommandExecutionListener.java
+    ${SRC_DIR}/${JNI_CP}/CommandPromptTextArea.java
+    ${SRC_DIR}/${JNI_CP}/Environment.java
+    ${SRC_DIR}/${JNI_CP}/ExternalAddressValue.java
+    ${SRC_DIR}/${JNI_CP}/FactInstance.java
+    ${SRC_DIR}/${JNI_CP}/FactAddressValue.java
+    ${SRC_DIR}/${JNI_CP}/FloatValue.java
+    ${SRC_DIR}/${JNI_CP}/Focus.java
+    ${SRC_DIR}/${JNI_CP}/FocusStack.java
+    ${SRC_DIR}/${JNI_CP}/InstanceAddressValue.java
+    ${SRC_DIR}/${JNI_CP}/InstanceNameValue.java
+    ${SRC_DIR}/${JNI_CP}/IntegerValue.java
+    ${SRC_DIR}/${JNI_CP}/LexemeValue.java
+    ${SRC_DIR}/${JNI_CP}/Module.java
+    ${SRC_DIR}/${JNI_CP}/MultifieldValue.java
+    ${SRC_DIR}/${JNI_CP}/NumberValue.java
+    ${SRC_DIR}/${JNI_CP}/PeriodicCallback.java
+    ${SRC_DIR}/${JNI_CP}/PrimitiveValue.java
+    ${SRC_DIR}/${JNI_CP}/Router.java
+    ${SRC_DIR}/${JNI_CP}/RouterTextArea.java
+    ${SRC_DIR}/${JNI_CP}/SlotValue.java
+    ${SRC_DIR}/${JNI_CP}/StringValue.java
+    ${SRC_DIR}/${JNI_CP}/SymbolValue.java
+    ${SRC_DIR}/${JNI_CP}/UserFunction.java
+    ${SRC_DIR}/${JNI_CP}/UserFunctionExamples.java
+    ${SRC_DIR}/${JNI_CP}/VoidValue.java)
+set(NATIVE_FILES
+    ${NATIVE_SRC_DIR}/clipsjni_environment.c
+    ${NATIVE_SRC_DIR}/clipsjni_environment_facts.c
+    ${NATIVE_SRC_DIR}/clipsjni_environment_instances.c
+    ${NATIVE_SRC_DIR}/clipsjni_environment_repl.c
+    ${NATIVE_SRC_DIR}/clipsjni_environment_routers.c
+    ${NATIVE_SRC_DIR}/clipsjni_environment_rules.c
+    ${NATIVE_SRC_DIR}/clipsjni_glue.c
+    ${NATIVE_SRC_DIR}/clipsjni_utilities.c)
+
+add_library(CLIPSJNI SHARED ${NATIVE_FILES})
+target_link_libraries(CLIPSJNI PUBLIC libclips)
+target_include_directories(CLIPSJNI PRIVATE ${JNI_INCLUDE_DIRS})
+install(
+  TARGETS CLIPSJNI
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib)
+
+add_jar(
+  JavaCLIPSJNI
+  SOURCES ${JNI_FILES}
+  OUTPUT_NAME CLIPSJNI
+  VERSION ${CLIPS_VERSION}
+  ENTRY_POINT net.sf.clipsrules.jni.Environment)
+install_jar(JavaCLIPSJNI DESTINATION share/clips/java)
+
+# custom manifest to add class path of main jar
+file(WRITE ${CMAKE_BINARY_DIR}/META-INF/MANIFEST.MF
+     "Manifest-Version: ${CLIPS_VERSION}\n" "Class-Path: CLIPSJNI.jar\n")
+
+# AnimalDemo
+set(ANIMAL_CP net/sf/clipsrules/jni/examples/animal)
+file(
+  GLOB ANIMAL_RSRC_FILES
+  RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+  ${SRC_DIR}/${ANIMAL_CP}/resources/*)
+add_jar(
+  AnimalDemo
+  SOURCES ${SRC_DIR}/${ANIMAL_CP}/AnimalDemo.java
+  ENTRY_POINT net.sf.clipsrules.jni.examples.animal.AnimalDemo
+  INCLUDE_JARS JavaCLIPSJNI
+  OUTPUT_NAME AnimalDemo
+  VERSION ${CLIPS_VERSION} RESOURCES NAMESPACE ${ANIMAL_CP}/resources
+                           ${ANIMAL_RSRC_FILES}
+  MANIFEST ${CMAKE_BINARY_DIR}/META-INF/MANIFEST.MF)
+install_jar(AnimalDemo DESTINATION share/clips/java)
+file(
+  GENERATE
+  OUTPUT clips-animal-demo
+  CONTENT
+    "#!/bin/sh\n \
+    java -jar $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>$<INSTALL_INTERFACE:${CMAKE_CURRENT_INSTALL_DIR}/bin>/AnimalDemo.jar \"\$@\"\n"
+)
+install(
+  PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/clips-animal-demo
+  DESTINATION bin
+  PERMISSIONS
+    OWNER_EXECUTE
+    OWNER_WRITE
+    OWNER_READ
+    GROUP_EXECUTE
+    GROUP_READ
+    WORLD_EXECUTE
+    WORLD_READ)
+
+# AutoDemo
+set(AUTO_CP net/sf/clipsrules/jni/examples/auto)
+file(
+  GLOB AUTO_RSRC_FILES
+  RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+  ${SRC_DIR}/${AUTO_CP}/resources/*)
+add_jar(
+  AutoDemo
+  SOURCES ${SRC_DIR}/${AUTO_CP}/AutoDemo.java
+  ENTRY_POINT net.sf.clipsrules.jni.examples.auto.AutoDemo
+  INCLUDE_JARS JavaCLIPSJNI
+  OUTPUT_NAME AutoDemo
+  VERSION ${CLIPS_VERSION} RESOURCES NAMESPACE ${AUTO_CP}/resources
+                           ${AUTO_RSRC_FILES}
+  MANIFEST ${CMAKE_BINARY_DIR}/META-INF/MANIFEST.MF)
+install_jar(AutoDemo DESTINATION share/clips/java)
+file(
+  GENERATE
+  OUTPUT clips-auto-demo
+  CONTENT
+    "#!/bin/sh\n \
+    java -jar $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>$<INSTALL_INTERFACE:${CMAKE_CURRENT_INSTALL_DIR}/bin>/AutoDemo.jar \"\$@\"\n"
+)
+install(
+  PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/clips-auto-demo
+  DESTINATION bin
+  PERMISSIONS
+    OWNER_EXECUTE
+    OWNER_WRITE
+    OWNER_READ
+    GROUP_EXECUTE
+    GROUP_READ
+    WORLD_EXECUTE
+    WORLD_READ)
+
+# SudokuDemo
+set(SUDOKU_CP net/sf/clipsrules/jni/examples/sudoku)
+file(
+  GLOB SUDOKU_RSRC_FILES
+  RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+  ${SRC_DIR}/${SUDOKU_CP}/resources/*)
+add_jar(
+  SudokuDemo
+  SOURCES ${SRC_DIR}/${SUDOKU_CP}/SudokuDemo.java
+  ENTRY_POINT net.sf.clipsrules.jni.examples.sudoku.SudokuDemo
+  INCLUDE_JARS JavaCLIPSJNI
+  OUTPUT_NAME SudokuDemo
+  VERSION ${CLIPS_VERSION} RESOURCES NAMESPACE ${SUDOKU_CP}/resources
+                           ${SUDOKU_RSRC_FILES}
+  MANIFEST ${CMAKE_BINARY_DIR}/META-INF/MANIFEST.MF)
+install_jar(SudokuDemo DESTINATION share/clips/java)
+file(
+  GENERATE
+  OUTPUT clips-sudoku-demo
+  CONTENT
+    "#!/bin/sh\n \
+    java -jar $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>$<INSTALL_INTERFACE:${CMAKE_CURRENT_INSTALL_DIR}/bin>/SudokuDemo.jar \"\$@\"\n"
+)
+install(
+  PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/clips-sudoku-demo
+  DESTINATION bin
+  PERMISSIONS
+    OWNER_EXECUTE
+    OWNER_WRITE
+    OWNER_READ
+    GROUP_EXECUTE
+    GROUP_READ
+    WORLD_EXECUTE
+    WORLD_READ)
+
+# WineDemo
+set(WINE_CP net/sf/clipsrules/jni/examples/wine)
+file(
+  GLOB WINE_RSRC_FILES
+  RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+  ${SRC_DIR}/${WINE_CP}/resources/*)
+add_jar(
+  WineDemo
+  SOURCES ${SRC_DIR}/${WINE_CP}/WineDemo.java
+  ENTRY_POINT net.sf.clipsrules.jni.examples.wine.WineDemo
+  INCLUDE_JARS JavaCLIPSJNI
+  OUTPUT_NAME WineDemo
+  VERSION ${CLIPS_VERSION} RESOURCES NAMESPACE ${WINE_CP}/resources
+                           ${WINE_RSRC_FILES}
+  MANIFEST ${CMAKE_BINARY_DIR}/META-INF/MANIFEST.MF)
+install_jar(WineDemo DESTINATION share/clips/java)
+file(
+  GENERATE
+  OUTPUT clips-wine-demo
+  CONTENT
+    "#!/bin/sh\n \
+    java -jar $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>$<INSTALL_INTERFACE:${CMAKE_CURRENT_INSTALL_DIR}/bin>/WineDemo.jar \"\$@\"\n"
+)
+install(
+  PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/clips-wine-demo
+  DESTINATION bin
+  PERMISSIONS
+    OWNER_EXECUTE
+    OWNER_WRITE
+    OWNER_READ
+    GROUP_EXECUTE
+    GROUP_READ
+    WORLD_EXECUTE
+    WORLD_READ)
+
+# RouterDemo
+set(ROUTER_CP net/sf/clipsrules/jni/examples/router)
+file(
+  GLOB ROUTER_RSRC_FILES
+  RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+  ${SRC_DIR}/${ROUTER_CP}/resources/*)
+add_jar(
+  RouterDemo
+  SOURCES ${SRC_DIR}/${ROUTER_CP}/RouterDemo.java
+  ENTRY_POINT net.sf.clipsrules.jni.examples.router.RouterDemo
+  INCLUDE_JARS JavaCLIPSJNI
+  OUTPUT_NAME RouterDemo
+  VERSION ${CLIPS_VERSION} RESOURCES NAMESPACE ${ROUTER_CP}/resources
+                           ${ROUTER_RSRC_FILES}
+  MANIFEST ${CMAKE_BINARY_DIR}/META-INF/MANIFEST.MF)
+install_jar(RouterDemo DESTINATION share/clips/java)
+file(
+  GENERATE
+  OUTPUT clips-router-demo
+  CONTENT
+    "#!/bin/sh\n \
+java -jar $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>$<INSTALL_INTERFACE:${CMAKE_CURRENT_INSTALL_DIR}/bin>/RouterDemo.jar \"\$@\"\n"
+)
+install(
+  PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/clips-router-demo
+  DESTINATION bin
+  PERMISSIONS
+    OWNER_EXECUTE
+    OWNER_WRITE
+    OWNER_READ
+    GROUP_EXECUTE
+    GROUP_READ
+    WORLD_EXECUTE
+    WORLD_READ)
+
+# CLIPS IDE
+set(IDE_CP net/sf/clipsrules/jni/examples/ide)
+set(IDE_FILES
+    ${SRC_DIR}/${IDE_CP}/CLIPSIDE.java
+    ${SRC_DIR}/${IDE_CP}/ActivationTableModel.java
+    ${SRC_DIR}/${IDE_CP}/AgendaBrowserFrame.java
+    ${SRC_DIR}/${IDE_CP}/AgendaBrowserManager.java
+    ${SRC_DIR}/${IDE_CP}/BoundsDesktopManager.java
+    ${SRC_DIR}/${IDE_CP}/ConstructInspectorFrame.java
+    ${SRC_DIR}/${IDE_CP}/DialogFrame.java
+    ${SRC_DIR}/${IDE_CP}/EditMenu.java
+    ${SRC_DIR}/${IDE_CP}/EntityBrowserFrame.java
+    ${SRC_DIR}/${IDE_CP}/EnvironmentMenu.java
+    ${SRC_DIR}/${IDE_CP}/FactBrowserManager.java
+    ${SRC_DIR}/${IDE_CP}/FactInstanceTableModel.java
+    ${SRC_DIR}/${IDE_CP}/FileMenu.java
+    ${SRC_DIR}/${IDE_CP}/FocusStackTableModel.java
+    ${SRC_DIR}/${IDE_CP}/FontDialog.java
+    ${SRC_DIR}/${IDE_CP}/FontPreferencesDialog.java
+    ${SRC_DIR}/${IDE_CP}/FontProperties.java
+    ${SRC_DIR}/${IDE_CP}/FontSample.java
+    ${SRC_DIR}/${IDE_CP}/FramePlacer.java
+    ${SRC_DIR}/${IDE_CP}/HelpMenu.java
+    ${SRC_DIR}/${IDE_CP}/IDEPreferences.java
+    ${SRC_DIR}/${IDE_CP}/InstanceBrowserManager.java
+    ${SRC_DIR}/${IDE_CP}/ModuleTableModel.java
+    ${SRC_DIR}/${IDE_CP}/SlotValueTableModel.java
+    ${SRC_DIR}/${IDE_CP}/TextFrame.java
+    ${SRC_DIR}/${IDE_CP}/TextMenu.java
+    ${SRC_DIR}/${IDE_CP}/WatchMenu.java)
+
+file(
+  GLOB IDE_RSRC_FILES
+  RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
+  ${SRC_DIR}/${IDE_CP}/resources/*)
+add_jar(
+  CLIPSIDE
+  SOURCES ${IDE_FILES}
+  ENTRY_POINT net.sf.clipsrules.jni.examples.ide.CLIPSIDE
+  INCLUDE_JARS JavaCLIPSJNI
+  OUTPUT_NAME CLIPSIDE
+  VERSION ${CLIPS_VERSION} RESOURCES NAMESPACE ${IDE_CP}/resources
+                           ${IDE_RSRC_FILES}
+  MANIFEST ${CMAKE_BINARY_DIR}/META-INF/MANIFEST.MF)
+install_jar(CLIPSIDE DESTINATION share/clips/java)
+file(
+  GENERATE
+  OUTPUT clips-ide
+  CONTENT
+    "#!/bin/sh\n \
+java -jar $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>$<INSTALL_INTERFACE:${CMAKE_CURRENT_INSTALL_DIR}/bin>/CLIPSIDE.jar \"\$@\"\n"
+)
+install(
+  PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/clips-ide
+  DESTINATION bin
+  PERMISSIONS
+    OWNER_EXECUTE
+    OWNER_WRITE
+    OWNER_READ
+    GROUP_EXECUTE
+    GROUP_READ
+    WORLD_EXECUTE
+    WORLD_READ)
diff --color -urN clipsrules-64x/CMakeLists.txt clipsrules-64x-new/CMakeLists.txt
--- clipsrules-64x/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ clipsrules-64x-new/CMakeLists.txt	2024-08-18 03:47:24.747775311 +0200
@@ -0,0 +1,38 @@
+# CLIPS 6.4.1 Console and Library macOS 13.3.1 Ubuntu 22.04 LTS Debian 11.3
+# Fedora 36 CentOS 9 Mint 20.3
+
+cmake_minimum_required(VERSION 3.12)
+project(CLIPS LANGUAGES C CXX)
+
+# Platform detection
+if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
+  set(CLIPS_OS "DARWIN")
+  set(WARNINGS
+      "-Wall -Wundef -Wpointer-arith -Wshadow -Wstrict-aliasing \
+                  -Winline -Wmissing-declarations -Wredundant-decls \
+                  -Wmissing-prototypes -Wnested-externs -Wstrict-prototypes \
+                  -Waggregate-return -Wno-implicit")
+elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
+  set(CLIPS_OS "LINUX")
+  set(WARNINGS "-Wall -Wundef -Wpointer-arith -Wshadow -Wstrict-aliasing \
+                  -Winline -Wredundant-decls -Waggregate-return")
+endif()
+
+# Compilation flags
+set(CMAKE_C_STANDARD 99)
+set(CMAKE_C_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+set(CLIPS_VERSION 6.4.1)
+set(CLIPS_SOVERSION 6)
+
+# Debug and Release configurations
+set(CMAKE_C_FLAGS_DEBUG "-O0 -g -fPIC ${WARNINGS}")
+set(CMAKE_C_FLAGS_RELEASE "-O3 -g -fno-strict-aliasing -fPIC ${WARNINGS}")
+set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -fPIC ${WARNINGS}")
+set(CMAKE_CXX_FLAGS_RELEASE "-O3 -g -fno-strict-aliasing -fPIC ${WARNINGS}")
+
+add_subdirectory(core)
+add_subdirectory(clipsjni)
+install(DIRECTORY examples DESTINATION .)
diff --color -urN clipsrules-64x/core/CMakeLists.txt clipsrules-64x-new/core/CMakeLists.txt
--- clipsrules-64x/core/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ clipsrules-64x-new/core/CMakeLists.txt	2024-08-18 03:47:31.924866929 +0200
@@ -0,0 +1,412 @@
+# Source files
+set(SOURCES
+    agenda.c
+    analysis.c
+    argacces.c
+    bload.c
+    bmathfun.c
+    bsave.c
+    classcom.c
+    classexm.c
+    classfun.c
+    classinf.c
+    classini.c
+    classpsr.c
+    clsltpsr.c
+    commline.c
+    conscomp.c
+    constrct.c
+    constrnt.c
+    crstrtgy.c
+    cstrcbin.c
+    cstrccom.c
+    cstrcpsr.c
+    cstrnbin.c
+    cstrnchk.c
+    cstrncmp.c
+    cstrnops.c
+    cstrnpsr.c
+    cstrnutl.c
+    default.c
+    defins.c
+    developr.c
+    dffctbin.c
+    dffctbsc.c
+    dffctcmp.c
+    dffctdef.c
+    dffctpsr.c
+    dffnxbin.c
+    dffnxcmp.c
+    dffnxexe.c
+    dffnxfun.c
+    dffnxpsr.c
+    dfinsbin.c
+    dfinscmp.c
+    drive.c
+    emathfun.c
+    engine.c
+    envrnmnt.c
+    envrnbld.c
+    evaluatn.c
+    expressn.c
+    exprnbin.c
+    exprnops.c
+    exprnpsr.c
+    extnfunc.c
+    factbin.c
+    factbld.c
+    factcmp.c
+    factcom.c
+    factfun.c
+    factgen.c
+    facthsh.c
+    factfile.c
+    factlhs.c
+    factmch.c
+    factmngr.c
+    factprt.c
+    factqpsr.c
+    factqury.c
+    factrete.c
+    factrhs.c
+    filecom.c
+    filertr.c
+    fileutil.c
+    generate.c
+    genrcbin.c
+    genrccmp.c
+    genrccom.c
+    genrcexe.c
+    genrcfun.c
+    genrcpsr.c
+    globlbin.c
+    globlbsc.c
+    globlcmp.c
+    globlcom.c
+    globldef.c
+    globlpsr.c
+    immthpsr.c
+    incrrset.c
+    inherpsr.c
+    inscom.c
+    insfile.c
+    insfun.c
+    insmngr.c
+    insmoddp.c
+    insmult.c
+    inspsr.c
+    insquery.c
+    insqypsr.c
+    iofun.c
+    lgcldpnd.c
+    memalloc.c
+    miscfun.c
+    modulbin.c
+    modulbsc.c
+    modulcmp.c
+    moduldef.c
+    modulpsr.c
+    modulutl.c
+    msgcom.c
+    msgfun.c
+    msgpass.c
+    msgpsr.c
+    multifld.c
+    multifun.c
+    objbin.c
+    objcmp.c
+    objrtbin.c
+    objrtbld.c
+    objrtcmp.c
+    objrtfnx.c
+    objrtgen.c
+    objrtmch.c
+    parsefun.c
+    pattern.c
+    pprint.c
+    prccode.c
+    prcdrfun.c
+    prcdrpsr.c
+    prdctfun.c
+    prntutil.c
+    proflfun.c
+    reorder.c
+    reteutil.c
+    retract.c
+    router.c
+    rulebin.c
+    rulebld.c
+    rulebsc.c
+    rulecmp.c
+    rulecom.c
+    rulecstr.c
+    ruledef.c
+    ruledlt.c
+    rulelhs.c
+    rulepsr.c
+    scanner.c
+    sortfun.c
+    strngfun.c
+    strngrtr.c
+    symblbin.c
+    symblcmp.c
+    symbol.c
+    sysdep.c
+    textpro.c
+    tmpltbin.c
+    tmpltbsc.c
+    tmpltcmp.c
+    tmpltdef.c
+    tmpltfun.c
+    tmpltlhs.c
+    tmpltpsr.c
+    tmpltrhs.c
+    tmpltutl.c
+    userdata.c
+    userfunctions.c
+    utility.c
+    watch.c)
+
+# Header files (to be installed)
+set(HEADERS
+    clips.h
+    constant.h
+    globlpsr.h
+    match.h
+    network.h
+    object.h
+    setup.h
+    usrsetup.h
+    agenda.h
+    analysis.h
+    argacces.h
+    bload.h
+    bmathfun.h
+    bsave.h
+    classcom.h
+    classexm.h
+    classfun.h
+    classinf.h
+    classini.h
+    classpsr.h
+    clsltpsr.h
+    commline.h
+    conscomp.h
+    constrct.h
+    constrnt.h
+    crstrtgy.h
+    cstrcbin.h
+    cstrccmp.h
+    cstrccom.h
+    cstrcpsr.h
+    cstrnbin.h
+    cstrnchk.h
+    cstrncmp.h
+    cstrnops.h
+    cstrnpsr.h
+    cstrnutl.h
+    default.h
+    defins.h
+    developr.h
+    dffctbin.h
+    dffctbsc.h
+    dffctcmp.h
+    dffctdef.h
+    dffctpsr.h
+    dffnxbin.h
+    dffnxcmp.h
+    dffnxexe.h
+    dffnxfun.h
+    dffnxpsr.h
+    dfinsbin.h
+    dfinscmp.h
+    drive.h
+    emathfun.h
+    engine.h
+    entities.h
+    envrnbld.h
+    envrnmnt.h
+    evaluatn.h
+    expressn.h
+    exprnbin.h
+    exprnops.h
+    exprnpsr.h
+    extnfunc.h
+    factbin.h
+    factbld.h
+    factcmp.h
+    factcom.h
+    factfile.h
+    factfun.h
+    factgen.h
+    facthsh.h
+    factlhs.h
+    factmch.h
+    factmngr.h
+    factprt.h
+    factqpsr.h
+    factqury.h
+    factrete.h
+    factrhs.h
+    filecom.h
+    filertr.h
+    fileutil.h
+    generate.h
+    genrcbin.h
+    genrccmp.h
+    genrccom.h
+    genrcexe.h
+    genrcfun.h
+    genrcpsr.h
+    globlbin.h
+    globlbsc.h
+    globlcmp.h
+    globlcom.h
+    globldef.h
+    immthpsr.h
+    incrrset.h
+    inherpsr.h
+    inscom.h
+    insfile.h
+    insfun.h
+    insmngr.h
+    insmoddp.h
+    insmult.h
+    inspsr.h
+    insquery.h
+    insqypsr.h
+    iofun.h
+    lgcldpnd.h
+    memalloc.h
+    miscfun.h
+    modulbin.h
+    modulbsc.h
+    modulcmp.h
+    moduldef.h
+    modulpsr.h
+    modulutl.h
+    msgcom.h
+    msgfun.h
+    msgpass.h
+    msgpsr.h
+    multifld.h
+    multifun.h
+    objbin.h
+    objcmp.h
+    objrtbin.h
+    objrtbld.h
+    objrtcmp.h
+    objrtfnx.h
+    objrtgen.h
+    objrtmch.h
+    parsefun.h
+    pattern.h
+    pprint.h
+    prccode.h
+    prcdrfun.h
+    prcdrpsr.h
+    prdctfun.h
+    prntutil.h
+    proflfun.h
+    reorder.h
+    reteutil.h
+    retract.h
+    router.h
+    rulebin.h
+    rulebld.h
+    rulebsc.h
+    rulecmp.h
+    rulecom.h
+    rulecstr.h
+    ruledef.h
+    ruledlt.h
+    rulelhs.h
+    rulepsr.h
+    scanner.h
+    sortfun.h
+    strngfun.h
+    strngrtr.h
+    symblbin.h
+    symblcmp.h
+    symbol.h
+    sysdep.h
+    textpro.h
+    tmpltbin.h
+    tmpltbsc.h
+    tmpltcmp.h
+    tmpltdef.h
+    tmpltfun.h
+    tmpltlhs.h
+    tmpltpsr.h
+    tmpltrhs.h
+    tmpltutl.h
+    userdata.h
+    utility.h
+    watch.h)
+
+file(GLOB ACTUAL_SOURCES "*.c")
+file(GLOB ACTUAL_HEADERS "*.h")
+# Sort the lists for comparison
+list(SORT SOURCES)
+list(SORT HEADERS)
+list(SORT ACTUAL_SOURCES)
+list(SORT ACTUAL_HEADERS)
+# Strip paths from the actual files list
+foreach(file_path ${ACTUAL_SOURCES})
+  get_filename_component(file_name ${file_path} NAME)
+  list(APPEND ACTUAL_SOURCES_STRIPPED ${file_name})
+endforeach()
+
+foreach(file_path ${ACTUAL_HEADERS})
+  get_filename_component(file_name ${file_path} NAME)
+  list(APPEND ACTUAL_HEADERS_STRIPPED ${file_name})
+endforeach()
+list(REMOVE_ITEM ACTUAL_SOURCES_STRIPPED main.c)
+
+# Compare and warn if there is a mismatch
+if(NOT SOURCES STREQUAL ACTUAL_SOURCES_STRIPPED)
+  message(
+    WARNING
+      "The SOURCES list does not match the actual .c files in the directory.")
+  list(APPEND S_NO_ACTUAL ${SOURCES})
+  list(REMOVE_ITEM S_NO_ACTUAL ${ACTUAL_SOURCES_STRIPPED})
+  message(WARNING "only in SOURCES list: ${S_NO_ACTUAL}")
+  list(APPEND ACTUAL_NO_S ${ACTUAL_SOURCES_STRIPPED})
+  list(REMOVE_ITEM ACTUAL_NO_S ${SOURCES})
+  message(WARNING "only in real directory: ${ACTUAL_NO_S}")
+endif()
+
+if(NOT HEADERS STREQUAL ACTUAL_HEADERS_STRIPPED)
+  message(
+    WARNING
+      "The HEADERS list does not match the actual .h files in the directory.")
+  list(APPEND S_NO_ACTUAL ${HEADERS})
+  list(REMOVE_ITEM S_NO_ACTUAL ${ACTUAL_HEADERS_STRIPPED})
+  message(WARNING "only in HEADERS list: ${S_NO_ACTUAL}")
+  list(APPEND ACTUAL_NO_S ${ACTUAL_HEADERS_STRIPPED})
+  list(REMOVE_ITEM ACTUAL_NO_S ${HEADERS})
+  message(WARNING "only in real directory: ${ACTUAL_NO_S}")
+endif()
+
+# Create shared library
+add_library(libclips SHARED ${SOURCES})
+set_target_properties(libclips PROPERTIES VERSION ${CLIPS_VERSION}
+                                          SOVERSION ${CLIPS_SOVERSION})
+target_include_directories(
+  libclips PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+                  $<INSTALL_INTERFACE:include/clips>)
+
+# Main executable
+add_executable(clips main.c)
+target_link_libraries(clips PRIVATE libclips m)
+# Install the shared library
+install(
+  TARGETS libclips
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib)
+
+# Install the main executable
+install(TARGETS clips RUNTIME DESTINATION bin)
+
+# Install header files
+install(FILES ${HEADERS} DESTINATION include/clips)
